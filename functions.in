# functions - ldap-auth-utils sub functions
# Copyright (C) 2016  JoungKyun.Kim <http://oops.org>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# path of command
cmd_cp="@CP@"
cmd_mv="@MV@"
cmd_rm="@RM@"
cmd_cat="@CAT@"
cmd_date="@DATE@"
cmd_egrep="@EGREP@"
cmd_grep="@GREP@"
cmd_awk="@AWK@"
cmd_sed="@SED@"
cmd_perl="@PERL@"
cmd_mkdir_p="@MKDIR_P@"
cmd_chown="@CHOWN@"
cmd_chmod="@CHMOD@"
cmd_getopt="@GETOPT@"
cmd_basename="@BASENAME@"
cmd_ldapadd="@LDAPADD@"
cmd_ldapdelete="@LDAPDELETE@"
cmd_ldapmodify="@LDAPMODIFY@"
cmd_ldapsearch="@LDAPSEARCH@"
cmd_slaptest="@SLAPTEST@"
cmd_slappasswd="@SLAPPASSWD@"
cmd_openssl="@OPENSSL@"

prefix="@prefix@"
confdir="@sysconfdir@"
datadir="@datarootdir@/ldap-auth-utils"


if [ "$(consoletype)" != "serial" -a -z "$NOANSI" ]; then
	sRED="\e[1;31m"
	sGREEN="\e[1;32m"
	sYELLOW="\e[1;33m"
	sBLUE="\e[1;34m"
	sMAGENTA="\e[1;35m"
	sCYAN="\e[1;36m"
	sWHITE="\e[1;37m"
	srRED="\e[1;7;31m"
	srGREEN="\e[0;7;32m"
	srYELLOW="\e[0;7;33m"
	srBLUE="\e[0;7;34m"
	srMAGENTA="\e[0;7;35m"
	srCYAN="\e[0;7;36m"
	srWHITE="\e[0;7;37m"
	sEND="\e[0;39m"
else
	sRED=""
	sGREEN=""
	sYELLOW=""
	sBLUE=""
	sMAGENTA=""
	sCYAN=""
	sWHITE=""
	srRED=""
	srGREEN=""
	srYELLOW=""
	srBLUE=""
	srMAGENTA=""
	srCYAN=""
	srWHITE=""
	sEND=""
fi

passwd_prompt() {
	local prompt="$* : "
	local inlen=0
	prompt_value=""

	while IFS= read -rs -p "$prompt" -n 1 char
	do
		if [[ $char == $'\0' ]]; then
			break
		elif [[ $char == $'\177' ]]; then
			# prevent bakcspace underflow
			[ $inlen -eq 0 ] && prompt='' && continue

			let inlen--
			prompt=$'\b \b'
			prompt_value=${prompt_value:0:$inlen}
			continue
		fi

		let inlen++
		prompt='*'
		prompt_value+="$char"
	done
	echo
}

prompt() { 
	echo -en "$* : "
	prompt_value=""
	read -r prompt_value
}

prompt_def() {
	local def="$1"; shift
	prompt "$*"
	
	[ -z "$prompt_value" ] && prompt_value="$def"
}

prompt_must() {
	prompt_value=""

	while [ -z "${prompt_value}" ]
	do
		prompt "$*"
	done
}

success() {
	echo -en "${sGREEN}"
	[ -n "$1" ] && echo -ne "$*" || echo -n "OK"
	echo -en "${sEND}"
}

failure() {
	echo -en "${sRED}"
	[ -n "$1" ] && echo -ne "$*" || echo -n "Failure"
	echo -en "${sEND}"
}

upper() {
	echo ${*^^}
	#echo "$*" | tr '[:lower:]' '[:upper:]'
}

stderr() {
	printf "$*" > /dev/stderr
}

is_numeric() {
	local v="$*"

	[[ $v =~ ^[0-9]+$ ]] && return 0 || return 1
}

ldap_timestamp() {
	if [ $# -eq 0 ]; then
		RET_TIMESTAMP=$(${cmd_date} +"%s")
		RET_DATEFORMAT=$(${cmd_date} -d "@${RET_TIMESTAMP}" +"%Y-%m-%d %H:%M:%S" 2> /dev/null)
		RET_TIMESTAMP=$(( ${RET_TIMESTAMP} / 86400 ))
		return 0
	fi

	local arg="$1"

	is_numeric ${arg}
	if [ $? -eq 0 ]; then
		# case unixstamp

		if [ ${arg} -eq 0 ]; then
			RET_TIMESTAMP=99999
			RET_DATEFORMAT="2243-10-19 00:00:00"
			return 0
		fi

		RET_TIMESTAMP="$arg"
		RET_DATEFORMAT=$(${cmd_date} -d "@${arg}" +"%Y-%m-%d %H:%M:%S" 2> /dev/null)
		[ $? -ne 0 ] && RET_TIMESTAMP="" && RET_DATEFORMAT="" && return 1
	else
		# case date format
		echo "$arg" | ${cmd_egrep} "^[0-9]{4}-[0-9]{2}-[0-9]{2}$" >& /dev/null
		[ $? -eq 0 ] && arg="${arg} 23:59:59"

		RET_DATEFORMAT="${arg}"
		RET_TIMESTAMP=$(${cmd_date} -d "${arg}" +"%s" 2> /dev/null)
		[ $? -ne 0 ] && RET_TIMESTAMP="" && RET_DATEFORMAT="" && return 1
	fi

	RET_TIMESTAMP=$(( $RET_TIMESTAMP / 86400 ))

	return 0
}

find_maxuid() {
	local MAX=$(${cmd_ldapsearch} ${LDAP_PRIV} -b "${USER_SCHEME}"  "(uid=*)" uidNumber 2> /dev/null | ${cmd_awk} '/^uidNumber:/ {print $2}' | sort | tail -n 1)
	RETVAL=$(( ${MAX} + 1 ))

	[ ${RETVAL} -lt ${MIN_UID} ] && RETVAL=${MIN_UID}
}

find_maxgid() {
	local MAX=$(${cmd_ldapsearch} ${LDAP_PRIV} -b "${GROUP_SCHEME}"  "(cn=*)" gidNumber 2> /dev/null | ${cmd_awk} '/^gidNumber:/ {print $2}' | sort | tail -n 1)
	RETVAL=$(( ${MAX} + 1 ))

	[ ${RETVAL} -lt ${MIN_UID} ] && RETVAL=${MIN_UID}
}

check_uniq_uid() {
	local nid=$1

	${cmd_ldapsearch} ${LDAP_PRIV} -b "${USER_SCHEME}"  "(uid=*)" uidNumber 2> /dev/null | \
		${cmd_awk} '/^uidNumber:/ {print $2}' | ${cmd_grep} "${nid}" >& /dev/null

	[ $? -eq 0 ] && return 1 || return 0
}

check_user_exists() {
	local id=$1

	${cmd_ldapsearch} ${LDAP_PRIV} -b "${USER_SCHEME}"  "(uid=${id})" uid 2> /dev/null | \
		${cmd_awk} '/^uid:/ {print $2}' | ${cmd_grep} "${id}" >& /dev/null

	return $?
}

check_uid_exists() {
	local uid=$1

	${cmd_ldapsearch} ${LDAP_PRIV} -b "${USER_SCHEME}"  "(uidNumber=${uid})" uidNumber 2> /dev/null | \
		${cmd_awk} '/^uidNumber:/ {print $2}' | ${cmd_grep} "${uid}" >& /dev/null
	return $?
}

get_user_attribute() {
	local id="$1"
	local attr="$2"

	RET_ATTR=$(${cmd_ldapsearch} ${LDAP_PRIV} -b "${USER_SCHEME}"  "(uid=${id})" ${attr} 2> /dev/null | ${cmd_grep} "^${attr}: ")
}

check_user_attribute() {
	local id="$1"; shift
	local attr="$1"; shift
	local value="$*"

	get_user_attribute "${id}" "${attr}"

	if [ -z "${value}" ]; then
		echo "${RET_ATTR}" | \
			${cmd_awk} "{print \$1}" | ${cmd_grep} "^${attr}:$" >& /dev/null
		RET=$?
	else
		echo "${RET_ATTR}" | \
			${cmd_awk} "{print \$2}" | ${cmd_grep} "^${value}$" >& /dev/null
		RET=$?
	fi

	return $RET
}

check_group_exists() {
	local gid=$1

	${cmd_ldapsearch} ${LDAP_PRIV} -b "${GROUP_SCHEME}" "(cn=${gid})" cn 2> /dev/null | \
		${cmd_awk} '/^cn:/ {print $2}' | ${cmd_grep} "^${gid}$" >& /dev/null

	return $?
}

check_gid_exists() {
	local gid=$1

	${cmd_ldapsearch} ${LDAP_PRIV} -b "${GROUP_SCHEME}" "(gidNUmber=${gid})" gidNumber 2> /dev/null | \
		${cmd_awk} '/^gidNumber:/ {print $2}' | ${cmd_grep} "^${gid}$" >& /dev/null

	return $?
}

check_group_member() {
	local gid="$1"
	local member="$2"

	${cmd_ldapsearch} ${LDAP_PRIV} -b "${GROUP_SCHEME}" "(cn=${gid})" memberUid 2> /dev/null | \
		${cmd_awk} '/^memberUid:/ {print $2}' | ${cmd_grep} "^${member}$" >& /dev/null

	return $?
}

check_group_attribute() {
	local id=$1
	local attr=$2

	${cmd_ldapsearch} ${LDAP_PRIV} -b "${GROUP_SCHEME}"  "(cn=${id})" ${attr} 2> /dev/null | \
		${cmd_awk} "/^${attr}:/ {print \$1}" | ${cmd_grep} "^${attr}:$" >& /dev/null

	return $?
}

set_crypt_salt() {
	local method="$1"
	method=$(upper ${method})

	case "$method" in
		SHA512)
			OPT_CRYPT_SALT='$6$%.16s'
			;;
		SHA256)
			OPT_CRYPT_SALT='$5$%.8s'
			;;
		*)
			OPT_CRYPT_SALT='$1$%.8s'
			;;
	esac
}

password_security() {
	local pass="$*"
	local class=0

	if [ ${PASS_MINLEN} -gt 0 ]; then
		length=${#pass}
		[ $length -lt ${PASS_MINLEN} ] && return 1
	fi

	if [ ${PASS_CLASSES} -gt 1 ]; then
		# check upper case
		echo "${pass}" | ${cmd_grep} '[A-Z]' >& /dev/null
		[ $? -eq 0 ] && class=$(( ${class} + 1 ))
		# check lower case
		echo "${pass}" | ${cmd_grep} '[a-z]' >& /dev/null
		[ $? -eq 0 ] && class=$(( ${class} + 1 ))
		# check numeric 
		echo "${pass}" | ${cmd_grep} '[0-9]' >& /dev/null
		[ $? -eq 0 ] && class=$(( ${class} + 1 ))
		# check specials 
		echo "${pass}" | ${cmd_grep} '[^a-zA-Z0-9]' >& /dev/null
		[ $? -eq 0 ] && class=$(( ${class} + 1 ))

		[ ${class} -lt ${PASS_CLASSES} ] && return 2
	fi

	return 0
}

is_object_enable() {
	local obj="$*"

	${cmd_ldapsearch} ${LDAP_PRIV}  -b "cn=schema,cn=config" 2> /dev/null | \
		${cmd_grep} "NAME '$obj'" >& /dev/null
	[ $? -eq 0 ] && return 0 || return 1
}

set_basedn_by_domain() {
	local id="$*"
	local user=""
	local domain=""

	OPT_DOMAIN=""
	BASEDN=""

	echo "${id}" | ${cmd_grep} "@" >& /dev/null
	[ $? -ne 0 ] && return 1

	IFS="@" read -r user domain <<< "$id"

	OPT_USERID=${user}
	OPT_DOMAIN="${domain}"
	BASEDN=$(echo "$domain" | ${cmd_sed} 's/\./,dc=/g')
	BASEDN="dc=${BASEDN}"

	return 0
}

get_uid() {
	local id="$*"

	RETVAL=$(${cmd_ldapsearch} ${LDAP_PRIV} -b "${USER_SCHEME}"  "(uid=${id})" uidNumber 2> /dev/null | ${cmd_awk} '/^uidNumber:/ {print $2}')
	let RETVAL++
	let RETVAL--
}

get_member_of_uid() {
	local id="$*"
	RETVAL=$(${cmd_ldapsearch} ${LDAP_PRIV} -b "${GROUP_SCHEME}" "(memberUid=${id})" dn 2> /dev/null | ${cmd_awk} '/^dn: / {print $2}')
}

ldap_decrypt_hash() {
	# STDIN mode
	if [ $# -eq 0 ]; then
		while read line
		do
			ldap_decrypt_hash $line
		done

		return
	fi

	local arg="$*"

	echo "${arg}" | ${cmd_grep} "^[^:]\+:: " >& /dev/null

	if [ $? -eq 0 ]; then
		IFS=': ' read -r directive dummy value <<< "${arg}"
		value="$(echo "$value" | base64 -d)"
	else
		#echo "${arg}" | ${cmd_grep} "^[^:]\+: " >& /dev/null
		#[ $? -ne 0 ] && echo "${arg}" && return
		echo "${arg}" | ${cmd_grep} "^#" >& /dev/null
		[ $? -eq 0 ] && echo "${arg}" && return

		IFS=': ' read -r directive value <<< "${arg}"
	fi

	if [ "${directive}" = "dn" ]; then
		local rval="${OPT_USERID}@${OPT_DOMAIN}"
		printf "${srWHITE}%-17s${sEND}: ${sGREEN}%s${sEND}\n" "compatibility dn" "${rval}"
	fi
	printf "%-17s: %s\n" "${directive}" "${value}"
}

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim: set filetype=sh noet sw=4 ts=4 fdm=marker:
# vim<600: noet sw=4 ts=4:
#
