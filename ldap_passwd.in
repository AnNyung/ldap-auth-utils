#!/bin/bash

# ldap_passwd - managed password of ldap user
# Copyright (C) 2016  JoungKyun.Kim <http://oops.org>
#
# This file is part of ldap-auth-utils
#
# ldap-auth-utils is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# ldap-auth-utils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

cmd_cat="@CAT@"
cmd_date="@DATE@"
cmd_getopt="@GETOPT@"
cmd_basename="@BASENAME@"
cmd_grep="@GREP@"
cmd_sed="@SED@"
cmd_awk="@AWK@"
cmd_genpasswd="@GENPASSWD@"
cmd_slappasswd="@SLAPPASSWD@"
cmd_ldapmodify="@LDAPMODIFY@"
cmd_ldapsearch="@LDAPSEARCH@"

prefix=@prefix@
datarootdir=@datarootdir@
datadir="@datarootdir@/ldap-auth-utils"

if [ -f "${datadir}/functions" ]; then
	source "${datadir}/functions"
fi

prog_init() {
	URI[0]=$(${cmd_cat} /etc/openldap/ldap.conf 2> /dev/null | ${cmd_awk} '/URI[ ]+/ {print $2}')
	URI[1]=$(${cmd_cat} /etc/openldap/ldap.conf 2> /dev/null | ${cmd_awk} '/URI[ ]+/ {print $3}')
	URI[2]=$(${cmd_cat} /etc/openldap/ldap.conf 2> /dev/null | ${cmd_awk} '/URI[ ]+/ {print $4}')
	BASEDN=$(${cmd_cat} /etc/openldap/ldap.conf 2> /dev/null | ${cmd_awk} '/BASE[ ]+/ {print substr($0, index($0,$2))}')
	BASEDN=$(echo ${BASEDN} | ${cmd_sed} 's/[[:space:]]\+//g')

	OPT_HASH=${PASSWD_MECH:=sha512}
	PASS_MINLEN=${PASS_MINLEN:=9}
	PASS_CLASSES=${PASS_CLASSES:=3}
}

stderr() {
	[ ${UID} -ne 0 ] && printf "$*" || printf "$*" > /dev/stderr
}

set_basedn_by_domain() {
	local id="$*"
	local user=""
	local domain=""

	OPT_DOMAIN=""
	BASEDN=""

	echo "${id}" | ${cmd_grep} "@" >& /dev/null
	[ $? -ne 0 ] && return 1

	IFS="@" read -r user domain <<< "$id"

	OPT_USERID=${user}
	OPT_DOMAIN="${domain}"
	BASEDN=$(echo "$domain" | ${cmd_sed} 's/\./,dc=/g')
	BASEDN="dc=${BASEDN}"
	FQDN="${user}@${domain}"

	return 0
}

passwd_prompt() {
	local prompt="$* : "
	local inlen=0
	prompt_value=""

	while IFS= read -rs -p "$prompt" -n 1 char
	do
		if [[ $char == $'\0' ]]; then
			break
		elif [[ $char == $'\177' ]]; then
			# prevent bakcspace underflow
			[ $inlen -eq 0 ] && prompt='' && continue

			let inlen--
			prompt=$'\b \b'
			prompt_value=${prompt_value:0:$inlen}
			continue
		fi

		let inlen++
		prompt='*'
		prompt_value+="$char"
	done
	echo
}

password_security() {
	local pass="$*"
	local class=0

	if [ ${PASS_MINLEN} -gt 0 ]; then
		length=${#pass}
		[ $length -lt ${PASS_MINLEN} ] && return 1
	fi

	if [ ${PASS_CLASSES} -gt 1 ]; then
		# check upper case
		echo "${pass}" | ${cmd_grep} '[A-Z]' >& /dev/null
		[ $? -eq 0 ] && class=$(( ${class} + 1 ))
		# check lower case
		echo "${pass}" | ${cmd_grep} '[a-z]' >& /dev/null
		[ $? -eq 0 ] && class=$(( ${class} + 1 ))
		# check numeric 
		echo "${pass}" | ${cmd_grep} '[0-9]' >& /dev/null
		[ $? -eq 0 ] && class=$(( ${class} + 1 ))
		# check specials 
		echo "${pass}" | ${cmd_grep} '[^a-zA-Z0-9]' >& /dev/null
		[ $? -eq 0 ] && class=$(( ${class} + 1 ))

		[ ${class} -lt ${PASS_CLASSES} ] && return 2
	fi

	return 0
}

set_crypt_salt() {
	local method="${1^^}"

	case "$method" in
		SHA512)
			OPT_CRYPT_SALT='$6$%.16s'
			;;
		SHA256)
			OPT_CRYPT_SALT='$5$%.8s'
			;;
		*)
			OPT_CRYPT_SALT='$1$%.8s'
			;;
	esac
}

help() {
	stderr $"ldap_passwd: change ldap password\n"
	stderr $"Usage: ldap_passwd [OPTIONS] USERNAME\n"
	stderr $"Options:\n"
	stderr $"    -g Group         Group OU [Default: Group]\n"
	stderr $"    -h               display this help message and exit\n"
	stderr $"    -m HASH_ALGO     md5 or sha512 [default: sha512]\n"
	stderr $"    -u Pepole        Account OU [default: People]\n"
	stderr $"\n"
	stderr $"USERNAME format\n"
	stderr $"    FROMAT : ACCOUNT@DOMAIN_NAME\n\n"
	stderr $"    if base dn of LDAP is \"dc=DOMAIN,dc=COM\", domain name is \"DOMAIN.COM\".\n"
	stderr $"\nExamples:\n"
	stderr $"    # change password of current login user\n"
	stderr $"    ldap_passwd\n\n"
	stderr $"    # change password of current login user with md5 hash algorithm\n"
	stderr $"    ldap_passwd -m md5\n\n"
	stderr $"    # change password of LDAP_USER with BASE DN 'dc=DOMAIN,dc=COM'\n"
	stderr $"    # Only root can change other account!\n"
	stderr $"    ldap_passwd LADP_USER@DOMAIN.com\n\n"
	exit 1
}

prog_init

[ "${UID}" -eq 0 ] && ROOT_PRIV=1 || ROOT_PRIV=0

opts=$(${cmd_getopt} -u -n "$(${cmd_basename} "$0")" -o g:,h,m:,u: -- "$@")
[ $? -ne 0 ] && help

set -- ${opts}
while true
do
	case "$1" in
		-g) GROUP_OU="$2"; shift ;;
		-h) help ;;
		-m)
			OPT_HASH="$2";
			shift

			[ "${OPT_HASH}" != "md5" -a "${OPT_HASH}" != "sha512" ] && \
				stderr $"Error: The value of -m option is must md5 or sha512" \
				exit 1
			;;
		-u) USER_OU="$2"; shift ;;
		--) shift; break;;
	esac
	shift
done

if [ ${ROOT_PRIV} -eq 0 ]; then
	[ $# -gt 0 ] && help

	if [ -z "${BASEDN}" ]; then
		stderr $"Error: BASEDN has not been set. Please set BASE option to the /etc/openldap/ldap.conf"
		stderr "\n\n"
		exit 1
	fi
else
	if [ $# -ne 1 ]; then
		stderr $"Error: Root must execute with USER account!\n"
		stderr $"       For example, run as '$0 ACCOUNT@DOMIAN'\n\n"
		help
	fi
	set_basedn_by_domain "$1"
	[ $? -ne 0 ] && \
		stderr $"Error: invalide USERNAME '${OPT_USERID}'\n" && help
fi

USER_OU=${USER_OU:=People}
GROUP_OU=${GROUP_OU:=Group}

USER_SCHEME="ou=${USER_OU},${BASEDN}"
GROUP_SCHEME="ou=${GROUP_OU},${BASEDN}"

HOSTS=${URI[*]}

if [ ${ROOT_PRIV} -eq 0 ]; then
	RDN="uid=${USER},${USER_SCHEME}"
	PRIV="-x -D $RDN"
	FQDN=$(echo ${BASEDN} | sed -e 's/^dc=//ig' -e 's/,dc=/./ig')
	FQDN="${USER}@${FQDN}"
else
	RDN="uid=${OPT_USERID},${USER_SCHEME}"
	#PRIV="cn=Manager,${BASEDN}"
	PRIV="-Y EXTERNAL"
	HOSTS="ldapi:///"
fi

set_crypt_salt $OPT_HASH

pass=""
ldappass=""
while [ -z "${pass}" ]
do
	if [ ${ROOT_PRIV} -eq 0 -a -z "${ldappass}" ]; then
		passwd_prompt $"Old password    "
		ldappass=$prompt_value

		#echo "${cmd_ldapsearch} -H ${HOSTS} ${PRIV} -w \"${ldappass}\""
		${cmd_ldapsearch} -H ${HOSTS} ${PRIV} -w "${ldappass}" >& /dev/null
		RET=$?
		[ ${RET} -eq 49 ] && \
			stderr $"    .. '${FQDN}' Invalid password\n" && \
			stderr $"       This is caused by wrong password or non ldap account\n" && \
			pass="" && ldappass="" && continue
		[ ${RET} -ne 0 ] && \
			stderr $"    .. connect error to ldap server.\n" && \
			stderr $"       Please contact the administrator.\n" && \
			exit 1


		echo $"Credential is OK"
		echo
	fi

	passwd_prompt $"New password    "
	pass=$prompt_value

	password_security "${pass}"
	RET=$?

	if [ $RET -ne 0 ]; then
		[ $RET -eq 1 ] && echo $"     .. The length of password is requried over ${PASS_MINLEN}"
		[ $RET -eq 2 ] && echo $"     .. password complexity problem" && \
			echo $"        combined with ${PASS_CLASSES} classes with upper case," && \
			echo $"        lower case, numeric or special character."
		pass=""
		continue
	fi

	passwd_prompt $"Re-New password "
	pass1=$prompt_value

	if [ -n "${pass}" -a -n "${pass1}" ]; then
		if [ "${pass}" != "${pass1}" ]; then
			echo $"     .. passwords doesn't match!"
			pass=""
		fi
	else
		echo $"     .. passwords doesn't match!"
		pass=""
	fi
done

OPT_PASSWD=${pass}
if [ -f "${cmd_slappasswd}" ]; then
	OPT_PASSWD=$(${cmd_slappasswd} -s "${OPT_PASSWD}" -h {crypt} -c "${OPT_CRYPT_SALT}")
else
	OPT_PASSWD=$(echo "${OPT_PASSWD}" | ${cmd_genpasswd} -i -m ${OPT_HASH})
	OPT_PASSWD="{CRYPT}${OPT_PASSWD}"
fi

#echo $OPT_PASSWD

RET_TIMESTAMP=$(${cmd_date} +"%s")
RET_DATEFORMAT=$(${cmd_date} -d "@${RET_TIMESTAMP}" +"%Y-%m-%d %H:%M:%S" 2> /dev/null)
RET_TIMESTAMP=$(( ${RET_TIMESTAMP} / 86400 ))

if [ $ROOT_PRIV -eq 1 ]; then
	passopt=""
else
	if [ -n "${ldappass}" ]; then
		passopt="-w ${ldappass}"
	else
		passopt="-W"
	fi
fi

# for debugging
cat <<EOF

Your Informations:

    * Account: ${FQDN}
    * RDN : ${RDN}
    * Host: ${HOSTS}
    * Privilieges: ${PRIV}
    * Commnad: ${cmd_ldapmodify} -H "${HOSTS}" ${PRIV} ${passopt}
    * Hash: ${OPT_PASSWD}

EOF

OPT_PASSWD=$(echo -n "$OPT_PASSWD" | base64 -w 0)

${cmd_cat} <<EOF | ${cmd_ldapmodify} -H "${HOSTS}" ${PRIV} ${passopt}
dn: ${RDN}
changetype: modify
replace: userPassword
userPassword:: ${OPT_PASSWD}
-
replace: shadowLastChange
shadowLastChange: ${RET_TIMESTAMP}
EOF

RET=$?

echo $RET

[ ${RET} -eq 0 ] && echo -en "\e[1;32mDone\e[0;39m" || echo -en "\e[1;31mFailure\e[0;39m"
echo

exit ${RET}


#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim: set filetype=sh noet sw=4 ts=4 fdm=marker:
# vim<600: noet sw=4 ts=4:
#
