#!/bin/bash

# ldap_auth_init - initionalize ldap auth database
# Copyright (C) 2016  JoungKyun.Kim <http://oops.org>
#
# This file is part of ldap-auth-utils
#
# ldap-auth-utils is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# ldap-auth-utils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

source "@datadir@/functions"

LDAP_PRIV="-Y EXTERNAL -H ldapi:///"

echo $"1. Installation ldap packages"
echo
echo

#yum install openldap-servers openldap-clients nss-pam-ldapd pam_ldap
/usr/bin/yum install openldap-servers openldap-clients

${cmd_rm} -rf /etc/openldap/slapd.d/
if [ ! -d /etc/openldap/slapd.d -a ! -f /etc/openldap/slapd.conf ]; then
	# convert from old style config slapd.conf

	${cmd_cp} -af /usr/share/openldap-servers/slapd.conf.obsolete /etc/openldap/slapd.conf
	${cmd_chown} root:root /etc/openldap/slapd.conf
	
	if [ ! -f "/etc/openldap/schema/ldapns.schema" ]; then
		cat <<EOF > /etc/openldap/schema/ldapns.schema
# \$Id: ldapns.schema,v 1.3 2003/05/29 12:57:29 lukeh Exp $
# LDAP Name Service Additional Schema
# http://www.iana.org/assignments/gssapi-service-names

attributetype ( 1.3.6.1.4.1.5322.17.2.1 NAME 'authorizedService'
	DESC 'IANA GSS-API authorized service name'
	EQUALITY caseIgnoreMatch
	SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

objectclass ( 1.3.6.1.4.1.5322.17.1.1 NAME 'authorizedServiceObject'
	DESC 'Auxiliary object class for adding authorizedService attribute'
	SUP top
	AUXILIARY
	MAY authorizedService )

objectclass ( 1.3.6.1.4.1.5322.17.1.2 NAME 'hostObject'
	DESC 'Auxiliary object class for adding host attribute'
	SUP top
	AUXILIARY
	MAY host )
EOF
	fi

	[ -f "/etc/openldap/schema/ldapns.schema" ] &&
	${cmd_perl} -pi -e \
		's!(include[\t].+collective.schema)!\1\ninclude\t\t/etc/openldap/schema/ldapns.schema!g' \
		/etc/openldap/slapd.conf

	if [ ! -f "/etc/openldap/schema/sudo.schema" ]; then
		schema=$(/bin/rpm -ql sudo 2>/dev/null | ${cmd_grep} -i openldap)
		[ $? -eq 0 ] &&
			${cmd_cp} -af ${schema} /etc/openldap/schema/sudo.schema
	fi

	[ -f "/etc/openldap/schema/sudo.schema" ] &&
	${cmd_perl} -pi -e \
		's!(include[\t].+collective.schema)!\1\ninclude\t\t/etc/openldap/schema/sudo.schema!g' \
		/etc/openldap/slapd.conf

	${cmd_mkdir_p} /etc/openldap/slapd.d/
	${cmd_slaptest} -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d &>/dev/null
	${cmd_chown} -R ldap:ldap /etc/openldap/slapd.d
	${cmd_chmod} -R 000 /etc/openldap/slapd.d
	${cmd_chmod} -R u+rwX /etc/openldap/slapd.d
	${cmd_rm} -f /var/lib/ldap/*

	${cmd_cp} -af /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
	${cmd_chown} ldap:ldap /var/lib/ldap/DB_CONFIG
	${cmd_mv} -f /etc/openldap/slapd.conf /etc/openldap/slapd-current.conf
fi
echo
echo


echo
echo $"2. syslog configuration"

FNAME="/etc/rsyslog.d/slapd.conf"
printf "   . %-60s ... " "${FNAME}"

${cmd_mkdir_p} /var/log/slapd >& /dev/null
${cmd_chown} -R ldap:ldap /var/log/slapd >& /dev/null

if [ ! -f "${FNAME}" ]; then
	${cmd_cat} > ${FNAME} <<EOF
local4.* /var/log/slapd/slapd.log
EOF
	if [ $? -eq 0 ]; then
		success "Done"
		echo
		/sbin/service rsyslog restart | ${cmd_sed} 's/^/     /g'
	fi
else
	success "Pass"
	echo
fi

FNAME="/etc/logrotate.d/openldap"
printf "   . %-60s ... " "${FNAME}"

if [ ! -f "${FNAME}" ]; then
	${cmd_cat} > ${FNAME} <<EOF
/var/log/slapd/*.log {
	copytruncate
	rotate 4
	monthly
	notifempty
	missingok
	compress
	create 0644 ldap ldap
}
EOF
	[ $? -eq 0 ] && success "Done" || failure
else
	success "Pass"
fi
echo
echo


echo
echo $"3. SLAPD configuration and start"

FNAME="/etc/sysconfig/ldap"
printf "   . %-60s ... " "${FNAME}"
${cmd_perl} -pi -e 's/#SLAPD_/SLAPD_/g' ${FNAME}

if [ $? -eq 0 ]; then
	success "Done"
	echo
	/sbin/service slapd restart | ${cmd_sed} 's/^/     /g'
	[ -f /usr/bin/systemctl ] && \
		/usr/sbin/systemctl enable slapd || /sbin/chkconfig slapd on
else
	failure
	echo
fi
echo



echo $"4. Order your BASE Information"

while [ -z "${opt}" ]
do
	echo -n $"   Input your BASE DN : "
	read opt

	if [ -n "${opt}" ]; then
		echo "${opt}" | ${cmd_grep} -i "dc=" >& /dev/null
		[ $? -ne 0 ] && opt=
	fi
done

BASEDN="${opt}"
BASEDN=$(echo ${BASEDN} | ${cmd_sed} 's/ //g')
BASE=$(echo "$BASEDN" | ${cmd_perl} -pe 's/,\s*dc=.*//ig' | ${cmd_perl} -pe 's/dc=/BASE=/ig')
eval "${BASE}"
BASEUP="${BASE^^}"

opt=""
while [ -z "${opt}" ]
do
	passwd_prompt $"   Input your ldap administrator password   "
	opt=$prompt_value
	passwd_prompt $"   Re-input your ldap administrator password"
	opt1=$prompt_value

	if [ -n "${opt}" -a -n "${opt1}" ]; then
		if [ "${opt}" != "${opt1}" ]; then
			echo $"     .. passwords doesn't match!"
			opt=""
		fi
	else
		echo $"     .. passwords doesn't match!"
		opt=""
	fi
done

ROOTPPW=${opt}
ROOTPW=$(slappasswd -s "${opt}")


echo
echo $"   Reault:"
echo "           BASE           => ${BASE}"
echo "           BASE DN        => ${BASEDN}"
echo "           ADMIN Password => ${ROOTPPW}"
echo "           ADMIN Password => ${ROOTPW}"
echo



echo
echo $"5. Settings BASE DN"

for file in /etc/openldap/slapd.d/cn\=config/olcDatabase*
do
	printf "   . %-60s ... " "${file}"
	${cmd_perl} -pi -e "s/dc=my-domain,dc=com/${BASEDN}/ig" "$file"
	[ $? -eq 0 ] && success "Done" || failure
	echo
done

${cmd_cat} <<EOF | ${cmd_ldapmodify} ${LDAP_PRIV} >& /dev/null
dn: olcDatabase={-1}frontend,cn=config
changetype: modify
replace: olcReadOnly
olcReadOnly: FALSE

dn: olcDatabase={0}config,cn=config
changetype: modify
replace: olcReadOnly
olcReadOnly: FALSE

dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcReadOnly
olcReadOnly: FALSE

dn: olcDatabase={2}bdb,cn=config
changetype: modify
replace: olcReadOnly
olcReadOnly: FALSE

EOF
echo



echo
echo $"6. Settings Admin password"

${cmd_cat} <<EOF | ${cmd_ldapmodify} ${LDAP_PRIV} >& /dev/stdout | ${cmd_sed} 's/^/   /g' | ${cmd_grep} -v "^[ ]*$"
dn: olcDatabase={0}config,cn=config
changetype: modify
add: olcRootPW
olcRootPW: ${ROOTPW}

dn: olcDatabase={2}bdb,cn=config
changetype: modify
add: olcRootPW
olcRootPW: ${ROOTPW}
EOF

/sbin/service slapd restart | ${cmd_sed} 's/^/     /g'
echo

${cmd_perl} -pi -e 's/\@LDAPPW\@/${ROOTPPW}/g' ${confdir}/ldap-auth-utils.conf >& /dev/null
${cmd_perl} -pi -e 's/\@RDN\@/cn=Manager,${BASEDN}/g' ${confdir}/ldap-auth-utils.conf >& /dev/null
${cmd_chmod} 600 ${confdir}/ldap-auth-utils.conf >& /dev/null


echo
echo $"7. Initial Directory Information Tree"

#
# use CN=manager privileges for confirm Manager privileges
#
LDAP_PPRIV="-H ldapi:/// -D cn=Manager,${BASEDN} -w ${ROOTPPW}"
${cmd_cat} <<EOF | ${cmd_ldapadd} -a -c ${LDAP_PPRIV} | ${cmd_sed} 's/^/   /g' | ${cmd_grep} -v "^[ ]*$"
dn: ${BASEDN}
dc: ${BASE}
o: ${BASEUP} LDAP
objectclass: dcObject
objectclass: organization
objectclass: top

dn: ou=Admin,${BASEDN}
ou: Admin
objectclass: organizationalUnit

dn: ou=People,${BASEDN}
ou: People
objectclass: organizationalUnit

dn: ou=Group,${BASEDN}
ou: Group
objectclass: organizationalUnit
EOF

[ $? -eq 0 ] && success "Done" || failure
echo
echo



echo
echo $"8. Create default groups"

${cmd_cat} <<EOF | ${cmd_ldapadd} -a -c ${LDAP_PPRIV} | ${cmd_sed} 's/^/   /g' | ${cmd_grep} -v "^[ ]*$"
# extended LDIF
#
# LDAPv3
# base <${BASEDN}> with scope subtree
# filter: (cn=*)
# requesting: ALL
#

# ldapadmins, Admin
dn: cn=ldapadmins,ou=Admin,${BASEDN}
objectClass: posixGroup
objectClass: top
cn: ldapadmins
description: LDAP Management group
gidNumber: 9999
memberUid: ssoadmin

# ldapROusers, Admin
dn: cn=ldapROusers,ou=Admin,${BASEDN}
objectClass: posixGroup
objectClass: top
cn: ldapROusers
description: LDAP Read only group
gidNumber: 9998
memberUid: replica
memberUid: ssomanager

# ldapmanagers, Admin
dn: cn=ldapmanagers,ou=Admin,${BASEDN}
objectClass: posixGroup
objectClass: top
cn: ldapmanagers
description: LDAP Manager group
gidNumber: 9997

# ldapusers, Group
dn: cn=ldapusers,ou=Group,${BASEDN}
objectClass: posixGroup
objectClass: top
cn: ldapusers
description: LDAP account groups
gidNumber: 10000

# ssoadmin, Admin
dn: uid=ssoadmin,ou=Admin,${BASEDN}
objectClass: posixAccount
objectClass: top
objectClass: inetOrgPerson
objectClass: shadowAccount
gidNumber: 9997
givenName: SSO
sn: Admin
displayName: SSO Admin
uid: ssoadmin
homeDirectory: /
gecos: SSO Aadmin
loginShell: /sbin/nologin
shadowFlag: 0
shadowMin: 0
shadowMax: 99999
shadowWarning: 0
shadowInactive: 99999
shadowLastChange: 12011
shadowExpire: 99999
cn: SSO Admin
uidNumber: 9999

dn: uid=ssomanager,ou=Admin,${BASEDN}
objectClass: posixAccount
objectClass: top
objectClass: inetOrgPerson
objectClass: shadowAccount
gidNumber: 9997
givenName: SSO
sn: Manager
displayName: SSO Manager
uid: ssomanager
homeDirectory: /
gecos: SSO Manager
loginShell: /sbin/nologin
shadowFlag: 0
shadowMin: 0
shadowMax: 99999
shadowWarning: 0
shadowInactive: 99999
shadowLastChange: 12011
shadowExpire: 99999
cn: SSO manager
uidNumber: 9998

dn: uid=replica,ou=Admin,${BASEDN}
objectClass: posixAccount
objectClass: top
objectClass: inetOrgPerson
objectClass: shadowAccount
gidNumber: 9997
givenName: Replica
sn: User
displayName: Replica User
uid: replica
homeDirectory: /
gecos: Replica User
loginShell: /sbin/nologin
shadowFlag: 0
shadowMin: 0
shadowMax: 99999
shadowWarning: 0
shadowInactive: 99999
shadowLastChange: 12011
shadowExpire: 99999
cn: Replica User
uidNumber: 9997
EOF

[ $? -eq 0 ] && success "Done" || failure
echo
echo



echo
echo $"9. LDAP default Settings"

${cmd_cat} <<EOF | ${cmd_ldapmodify} ${LDAP_PRIV} | ${cmd_sed} 's/^/   /g' | ${cmd_grep} -v "^[ ]*$"
dn: olcDatabase={-1}frontend,cn=config
changetype: modify
add: olcAccess
olcAccess: to dn.base="" by * read
olcAccess: to dn.base="cn=subschema" by * read
olcAccess: to dn.subtree="ou=People,${BASEDN}" attrs=userPassword,shadowLastChange by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage by set="[cn=ldapadmins,ou=Admin,${BASEDN}]/memberUid & user/uid" manage by set="[cn=ldapROusers,ou=Admin,${BASEDN}]/memberUid & user/uid" read by self =wx by anonymous auth
olcAccess: to dn.subtree="ou=Group,${BASEDN}" by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage by set="[cn=ldapadmins,ou=Admin,${BASEDN}]/memberUid & user/uid" manage by users read by anonymous auth
olcAccess: to dn.subtree="ou=People,${BASEDN}" by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage by set="[cn=ldapadmins,ou=Admin,${BASEDN}]/memberUid & user/uid" manage by users read by anonymous auth
olcAccess: to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" manage by set="[cn=ldapadmins,ou=Admin,${BASEDN}]/memberUid & user/uid" manage by set="[cn=ldapROusers,ou=Admin,${BASEDN}]/memberUid & user/uid" read by anonymous auth
EOF

[ $? -eq 0 ] && success "Done" || failure
echo
echo

exit 0

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim: set filetype=sh noet sw=4 ts=4 fdm=marker:
# vim<600: noet sw=4 ts=4:
#
