#!/bin/bash

# ldap_grpdel - remove ldap group
# Copyright (C) 2016  JoungKyun.Kim <http://oops.org>
#
# This file is part of ldap-auth-utils
#
# ldap-auth-utils is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# ldap-auth-utils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

source "@datadir@/functions"

help() {
	stderr "ldap_grpdel: Remove group on LDAP database\n"
	stderr "Usage: ldap_grpdel [OPTIONS] GROUPNAME\n"
	stderr "Options:\n"
	stderr "    -m MERBER_NAME   group member. enable multiple\n"
	stderr "    -h               display this help message and exit\n"
	stderr "\n"
	stderr "GROUPRNAME format\n"
	stderr "    FROMAT : ACCOUNT@DOMAIN_NAME\n\n"
	stderr "    if base dn of LDAP is \"dc=DOMAIN,dc=COM\", domain name is \"DOMAIN.COM\".\n"
	stderr "\nExamples:\n"
	stderr "    # remove LDAP_GROUP with BASE DN 'dc=DOMAIN,dc=COM'\n"
	stderr "    ldap_grpdel LDAP_GROUP@DOMAIN.COM\n\n"
	stderr "    # remove member of LDAP_GROUP@DOMAIN.COM\n"
	stderr "    ldap_grpdel -m member1 -m member2 LDAP_GROUP\n"
	exit 1
}


conf_context=$(LANG="C" ${cmd_sed} -n -f ${datadir}/config.sed ${confdir}/ldap-auth-utils.conf)
eval ${conf_context}

USER_DN=${USER_DN:=People}
GROUP_DN=${GROUP_DN:=Group}

OPT_MEMBERS=""

opts=$(${cmd_getopt} -u -n "$(${cmd_basename} "$0")" -o h,m: -- "$@")
[ $? -ne 0 ] && help

set -- ${opts}
while true
do
	case "$1" in
		-m) OPT_MEMBERS="${OPT_MEMBERS} $2";shift ;;
		-h) help ;;
		--) shift; break;;
	esac
	shift
done

[ $# -ne 1 ] && help
OPT_GRPNAME="$1"
set_basedn_by_domain "${OPT_GRPNAME}"
[ $? -ne 0 ] && \
	stderr "Error: invalide GROUPNAME '${OPT_USERID}'\n" && help
[ -n "${OPT_USERID}" ] && OPT_GRPNAME="${OPT_USERID}"

USER_SCHEME="ou=${USER_DN},${BASEDN}"
GROUP_SCHEME="ou=${GROUP_DN},${BASEDN}"

${cmd_cat} <<EOF

Your informations:

    GROUP ID     : ${OPT_GRPNAME}
    MEMBERS      : ${OPT_MEMBERS}

EOF


check_group_exists ${OPT_GRPNAME}
RET=$?

[ ${RET} -ne 0 ] && stderr "Error: '${OPT_GRPNAME}' group is not found!\n" && exit 1

if [ -z "${OPT_MEMBERS}" ]; then
	# remove group
	echo -n " * Remove group '${OPT_GRPNAME}' .. "
	REMOVE_DN="cn=${OPT_GRPNAME},${GROUP_SCHEME}"
	${cmd_ldapdelete} ${LDAP_PRIV} "${REMOVE_DN}" >& /dev/null
	RET=$?
	[ ${RET} -eq 0 ] && success || failure
	echo
	exit $RET
fi

# remove group member

for member in ${OPT_MEMBERS}
do
	echo -n " * Remove '${OPT_GRPNAME}' member '${member}' .. "
	check_group_member "${OPT_GRPNAME}" "${member}"
	[ $? -ne 0 ] && failure "no exists" && echo && continue

	${cmd_ldapmodify} ${LDAP_PRIV} <<EOF >& /dev/null
dn: cn=${OPT_GRPNAME},${GROUP_SCHEME}
changetype: modify
delete: memberUid
memberUid: ${member}
EOF
	[ $? -eq 0 ] && success || failure
	echo
done

exit


#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim: set filetype=sh noet sw=4 ts=4 fdm=marker:
# vim<600: noet sw=4 ts=4:
#
